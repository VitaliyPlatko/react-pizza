import React, { useContext } from 'react'

import qs from 'qs'

import Categories from '../components/Categories';
import PizzaBlock from "../components/PizzaBlock";
import Sort from "../components/Sort";
import Skeleton from "../components/PizzaBlock/Skeleton";

import { Pagination } from '../components/Pagination';
import { SearchContext } from '../App';

import { useDispatch, useSelector } from 'react-redux';
import { setCategotyId } from '../redux/slices/filterSlice';
import { fetchPizzas } from '../redux/slices/pizzaSlice'
import { useNavigate } from 'react-router-dom';
import { List } from 'react-content-loader';


function Home () {
    /* –¶–µ —Ñ—É–Ω–∫—Ü—ñ—è —è–∫–∞ –±—É–¥–µ –º—ñ–Ω—è—Ç–∏ –Ω–∞—à —Å—Ç–µ–π—Ç */
    const dispatch = useDispatch()
    const navigate = useNavigate()
    const isSearch = React.useRef(false)
    const {categoryID, sort, setFilters} = useSelector(state => state.filter)
    const {items, status} = useSelector((state)=>state.pizza)

    /* –§—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –≤–∏–±–∏—Ä–∞—Ç–∏ id –∫–æ—Ç–µ–≥–æ—Ä—ñ—ó —ñ –ø–µ—Ä–µ–¥–∞—î —ó—ó –≤ Redux —á–µ—Ä–µ–∑ useDispatch */
    const onChangeCategory = (id) => dispatch(setCategotyId(id))

    const {serchValue} = useContext(SearchContext)
    
    const [currentPage, setCurrentPage] = React.useState(1)

    /* –§—É–Ω–∫—Ü—ñ—è —ñ–¥–ø–æ—ñ–¥–∞—î –∑–∞ –≤–≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–µ–∫–µ–Ω–¥–æ–º */
    const getPizzas=async()=>{

        const sortBy = sort.sortProperty.replace('-','')
        const order = sort.sortProperty.includes('-')?'asc':'desc'
        const category = categoryID>0?`&category=${categoryID}`:''
        const search = serchValue ? `&search=${serchValue}`:''

        dispatch(fetchPizzas({sortBy, order, category, search, currentPage}))

        window.scrollTo(0,0)
    }


    React.useEffect(()=>{
        /* –Ø–∫—â–æ –≤—ñ–Ω —î —Ç–æ —Ç–æ–¥—ñ –º–∏ –±—É–¥–µ–º–æ —Ü–µ –ø–∞—Ä—Å–∏—Ç–∏ */
        if(window.Location.search){
            /* substrin –∑–∞–±–∏—Ä–∞—î ? –∑ —Å—Å–∏–ª–∫–∏ (–∞—Ä—Å–∏—Ç—å —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –≤ –æ–±—î–∫—Ç) */
            const params = qs.parse(window.Location.search.substring(1))
            /* –ü—Ä–æ–±—ñ–≥–∞—î–º–æ—Å—å –ø–æ –∫–æ–∂–Ω—ñ–π –ª–∞—Å—Ç–∏–æ—Å—Ç—ñ sortProperty —ñ –≤ –æ–±—î–∫—Ç—ñ sortProperty –∑–Ω–∞–π—Ç–∏ —Ç–æ —â–æ —î –≤ params.sortProperty */
            const sort = List.find(obj=>obj.sortProperty===params.sortProperty)
            dispatch(
                setFilters({
                    /* –ü–µ—Ä–µ–¥–∞—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ Redux */
                    ...params,
                    sort
                })
            )
            isSearch.current = true
        }
    },[])


    React.useEffect(()=>{
        getPizzas()
    },[categoryID, sort.sortProperty, serchValue, currentPage])


    // –≤—à–∏–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤ –∞–¥—Ä–µ—Å–Ω—É —Å—Ç—Ä—ñ—á–∫—É
    React.useEffect(()=>{
        const queryString = qs.stringify({
            sortProperty: sort.sortProperty,
            categoryID,
            currentPage,
        })
        navigate(`?${queryString}`)
    },[categoryID, sort.sortProperty, currentPage])


    const pizzas = items.map((obj)=>(<PizzaBlock key={obj.id} {...obj}/>))
    const skeletons = [...new Array(8)].map((_, index)=><Skeleton key={index}/>)


    return (
        <div className="container">
            <div className="content__top">
                <Categories value={categoryID} onChangeCategory={onChangeCategory}/>
                <Sort />
            </div>
            <h2 className="content__title">–í—Å—ñ –ø—ñ—Ü—Ü–∏</h2>
            {
                status === 'error'?(
                    <div className='content__error-info'>
                        <h2>–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ <icon>üòï</icon></h2>
                        <p>–ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ—Ü—Ü–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É –ø—ñ–∑–Ω—ñ—à–µ</p>
                    </div>
                ):(<div className="content__items">{status == 'loading'?skeletons:pizzas}</div>)
            }
            
            <Pagination onChangePage={(number)=>setCurrentPage(number)} />
        </div>
    )
}


export default Home
import React from 'react'

import qs from 'qs'

import { List } from '../components/Sort';
import { Skeleton, PizzaBlock, Categories, Pagination, Sort } from '../components/index'

import { useSelector } from 'react-redux';
import { setCategotyId, setFilters } from '../redux/filter/slice';
import { fetchPizzas } from '../redux/pizza/asyncActions';
import { Link, useNavigate } from 'react-router-dom';
import { useAppDispatch } from '../redux/store';

import { selectPizzaData } from '../redux/pizza/selectors';
import { SearchPizzaParams } from '../redux/pizza/types';

import { selectFilter } from '../redux/filter/selectors';

const Home: React.FC = () => {
    /* –¶–µ —Ñ—É–Ω–∫—Ü—ñ—è —è–∫–∞ –±—É–¥–µ –º—ñ–Ω—è—Ç–∏ –Ω–∞—à —Å—Ç–µ–π—Ç */
    const navigate = useNavigate()
    const dispatch = useAppDispatch()
    const isSearch = React.useRef(false)
    const { categoryID, sort, serchValue } = useSelector(selectFilter)
    const { items, status } = useSelector(selectPizzaData)

    /* –§—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –≤–∏–±–∏—Ä–∞—Ç–∏ id –∫–æ—Ç–µ–≥–æ—Ä—ñ—ó —ñ –ø–µ—Ä–µ–¥–∞—î —ó—ó –≤ Redux —á–µ—Ä–µ–∑ useDispatch */
    const onChangeCategory = React.useCallback((idx: number) => dispatch(setCategotyId(idx)), [])
    const [currentPage, setCurrentPage] = React.useState(1)

    const getPizzas = async () => {
        const sortBy = sort.sortProperty.replace('-', '')
        const order = sort.sortProperty.includes('-') ? 'asc' : 'desc'
        const category = categoryID > 0 ? `&category=${categoryID}` : ''
        const search = serchValue
        dispatch(
            fetchPizzas({
                sortBy,
                order,
                category,
                search,
                currentPage: String(currentPage)
            })
        )
        window.scrollTo(0, 0)
    }

    React.useEffect(() => {
        /* –Ø–∫—â–æ –≤—ñ–Ω —î —Ç–æ —Ç–æ–¥—ñ –º–∏ –±—É–¥–µ–º–æ —Ü–µ –ø–∞—Ä—Å–∏—Ç–∏ */
        if (!window.location.search) {
            /* substrin –∑–∞–±–∏—Ä–∞—î ? –∑ —Å—Å–∏–ª–∫–∏ (–∞—Ä—Å–∏—Ç—å —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –≤ –æ–±'—î–∫—Ç) */
            const params = qs.parse(window.location.search.substring(1)) as unknown as SearchPizzaParams;
            /* –ü—Ä–æ–±—ñ–≥–∞—î–º–æ—Å—å –ø–æ –∫–æ–∂–Ω—ñ–π –ª–∞—Å—Ç–∏–æ—Å—Ç—ñ sortProperty —ñ –≤ –æ–±'—î–∫—Ç—ñ sortProperty –∑–Ω–∞–π—Ç–∏ —Ç–æ —â–æ —î –≤ params.sortProperty */
            const sort = List.find((obj) => obj.sortProperty === params.sortBy);
            dispatch(
                setFilters({
                    serchValue: params.search,
                    categoryID: Number(params.category),
                    currentPage: Number(params.currentPage),
                    /* –Ø–∫—â–æ –ø—Ä–∏–π–¥–µ undefined —Ç–æ–¥—ñ –ø–µ—Ä–µ–¥–∞–≤–∞–π –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫—É List –∞ —è–∫—â–æ –ø—Ä–∏–π–¥–µ —Ç–æ–¥—ñ sort */
                    sort: sort || List[0],
                })
            );
            isSearch.current = true;
        }
    }, []);

    React.useEffect(() => {
        getPizzas()
    }, [categoryID, sort.sortProperty, serchValue, currentPage])

    // –≤—à–∏–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤ –∞–¥—Ä–µ—Å–Ω—É —Å—Ç—Ä—ñ—á–∫—É
    React.useEffect(() => {
        const queryString = qs.stringify({
            sortProperty: sort.sortProperty,
            categoryID,
            currentPage,
        })
        navigate(`?${queryString}`)
    }, [categoryID, sort.sortProperty, currentPage])

    const pizzas = items.map((obj: any) => <PizzaBlock key={obj.id} {...obj} />)
    const skeletons = [...new Array(8)].map((_, index) => <Skeleton key={index} />)

    return (
        <div className="container">
            <div className="content__top">
                <Categories value={categoryID} onChangeCategory={onChangeCategory} />
                <Sort value={sort} />
            </div>
            <h2 className="content__title">–í—Å—ñ –ø—ñ—Ü—Ü–∏</h2>
            {
                status === 'error' ? (
                    <div className='content__error-info'>
                        <h2>–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ <span>üòï</span></h2>
                        <p>–ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ—Ü—Ü–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É –ø—ñ–∑–Ω—ñ—à–µ</p>
                    </div>
                ) : (
                    <div className="content__items">{status == 'loading' ? skeletons : pizzas}</div>)
            }
            <Pagination onChangePage={(number: number) => setCurrentPage(number)} />
        </div>
    )
}

export default Home